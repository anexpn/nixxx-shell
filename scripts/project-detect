#!/usr/bin/env bash

# Project detection and smart environment setup script

set -euo pipefail

# Color codes
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m'

# Detect project type based on files
detect_project_type() {
    local current_dir="${1:-$(pwd)}"
    local types=()
    
    # Check for various project indicators
    [[ -f "$current_dir/Cargo.toml" ]] && types+=("rust")
    [[ -f "$current_dir/package.json" ]] && types+=("node")
    [[ -f "$current_dir/pyproject.toml" || -f "$current_dir/requirements.txt" || -f "$current_dir/setup.py" ]] && types+=("python")
    [[ -f "$current_dir/go.mod" ]] && types+=("go")
    [[ -f "$current_dir/flake.nix" || -f "$current_dir/default.nix" ]] && types+=("nix")
    [[ -f "$current_dir/Dockerfile" || -f "$current_dir/docker-compose.yml" ]] && types+=("docker")
    [[ -f "$current_dir/main.tf" || -f "$current_dir/terraform.tf" ]] && types+=("terraform")
    [[ -d "$current_dir/.git" ]] && types+=("git")
    
    printf '%s\n' "${types[@]}"
}

# Suggest tools based on project type
suggest_tools() {
    local project_type="$1"
    
    case "$project_type" in
        "rust")
            echo -e "${CYAN}Rust Project Detected!${NC}"
            echo -e "${YELLOW}Suggested tools:${NC}"
            echo -e "  â€¢ ${GREEN}cargo${NC} - Rust package manager"
            echo -e "  â€¢ ${GREEN}rust-analyzer${NC} - LSP for Rust"
            echo -e "  â€¢ ${GREEN}clippy${NC} - Rust linter"
            echo -e "  â€¢ ${GREEN}rustfmt${NC} - Rust formatter"
            echo -e "  â€¢ ${GREEN}tokei${NC} - Count lines of Rust code"
            echo -e "  â€¢ ${GREEN}rg${NC} - Search Rust code efficiently"
            echo
            echo -e "${BLUE}Quick commands:${NC}"
            echo -e "  cargo check      # Check compilation"
            echo -e "  cargo test       # Run tests"
            echo -e "  cargo clippy     # Run linter"
            echo -e "  tokei --type rust # Count Rust lines"
            ;;
        "node")
            echo -e "${CYAN}Node.js Project Detected!${NC}"
            echo -e "${YELLOW}Suggested tools:${NC}"
            echo -e "  â€¢ ${GREEN}node${NC} - Node.js runtime"
            echo -e "  â€¢ ${GREEN}npm/yarn/pnpm${NC} - Package managers"
            echo -e "  â€¢ ${GREEN}jq${NC} - Parse package.json"
            echo -e "  â€¢ ${GREEN}fd${NC} - Find JS/TS files"
            echo
            echo -e "${BLUE}Quick commands:${NC}"
            echo -e "  npm install      # Install dependencies"
            echo -e "  npm test         # Run tests"
            echo -e "  jq .scripts package.json # Show scripts"
            echo -e "  fd -e js -e ts   # Find source files"
            ;;
        "python")
            echo -e "${CYAN}Python Project Detected!${NC}"
            echo -e "${YELLOW}Suggested tools:${NC}"
            echo -e "  â€¢ ${GREEN}python3${NC} - Python interpreter"
            echo -e "  â€¢ ${GREEN}ruff${NC} - Fast Python linter/formatter"
            echo -e "  â€¢ ${GREEN}jq${NC} - Parse pyproject.toml (if converted)"
            echo -e "  â€¢ ${GREEN}fd${NC} - Find Python files"
            echo
            echo -e "${BLUE}Quick commands:${NC}"
            echo -e "  python -m venv venv    # Create virtual env"
            echo -e "  pip install -r requirements.txt"
            echo -e "  ruff check .           # Lint code"
            echo -e "  fd -e py               # Find Python files"
            ;;
        "go")
            echo -e "${CYAN}Go Project Detected!${NC}"
            echo -e "${YELLOW}Suggested tools:${NC}"
            echo -e "  â€¢ ${GREEN}go${NC} - Go compiler and tools"
            echo -e "  â€¢ ${GREEN}golangci-lint${NC} - Go linter"
            echo -e "  â€¢ ${GREEN}fd${NC} - Find Go files"
            echo
            echo -e "${BLUE}Quick commands:${NC}"
            echo -e "  go mod tidy      # Clean dependencies"
            echo -e "  go test ./...    # Run tests"
            echo -e "  go build         # Build binary"
            echo -e "  fd -e go         # Find Go files"
            ;;
        "nix")
            echo -e "${CYAN}Nix Project Detected!${NC}"
            echo -e "${YELLOW}Suggested tools:${NC}"
            echo -e "  â€¢ ${GREEN}nix${NC} - Nix package manager"
            echo -e "  â€¢ ${GREEN}direnv${NC} - Auto-load nix environment"
            echo -e "  â€¢ ${GREEN}fd${NC} - Find Nix files"
            echo
            echo -e "${BLUE}Quick commands:${NC}"
            echo -e "  nix flake check  # Check flake"
            echo -e "  nix develop      # Enter dev shell"
            echo -e "  direnv allow     # Auto-load environment"
            echo -e "  fd -e nix        # Find Nix files"
            ;;
        "docker")
            echo -e "${CYAN}Docker Project Detected!${NC}"
            echo -e "${YELLOW}Suggested tools:${NC}"
            echo -e "  â€¢ ${GREEN}dive${NC} - Analyze Docker images"
            echo -e "  â€¢ ${GREEN}ctop${NC} - Container monitoring"
            echo -e "  â€¢ ${GREEN}docker-compose${NC} - Multi-container apps"
            echo
            echo -e "${BLUE}Quick commands:${NC}"
            echo -e "  docker build .   # Build image"
            echo -e "  dive <image>     # Analyze image layers"
            echo -e "  ctop             # Monitor containers"
            ;;
        "terraform")
            echo -e "${CYAN}Terraform Project Detected!${NC}"
            echo -e "${YELLOW}Suggested tools:${NC}"
            echo -e "  â€¢ ${GREEN}terraform${NC} - Infrastructure as code"
            echo -e "  â€¢ ${GREEN}jq${NC} - Parse terraform.tfstate"
            echo -e "  â€¢ ${GREEN}fd${NC} - Find .tf files"
            echo
            echo -e "${BLUE}Quick commands:${NC}"
            echo -e "  terraform init   # Initialize"
            echo -e "  terraform plan   # Plan changes"
            echo -e "  terraform apply  # Apply changes"
            ;;
        "git")
            echo -e "${CYAN}Git Repository Detected!${NC}"
            echo -e "${YELLOW}Suggested tools:${NC}"
            echo -e "  â€¢ ${GREEN}lazygit${NC} - Git TUI"
            echo -e "  â€¢ ${GREEN}gh${NC} - GitHub CLI"
            echo -e "  â€¢ ${GREEN}gitleaks${NC} - Security scanning"
            echo
            echo -e "${BLUE}Quick commands:${NC}"
            echo -e "  lazygit          # Interactive Git interface"
            echo -e "  gh repo view     # View repository info"
            echo -e "  gitleaks detect  # Scan for secrets"
            ;;
    esac
}

# Generate project-specific aliases
generate_aliases() {
    local project_types=("$@")
    
    echo -e "${YELLOW}Suggested project-specific aliases:${NC}"
    
    for type in "${project_types[@]}"; do
        case "$type" in
            "rust")
                echo "alias cr='cargo run'"
                echo "alias ct='cargo test'"
                echo "alias cc='cargo check'"
                echo "alias cb='cargo build --release'"
                ;;
            "node")
                echo "alias nr='npm run'"
                echo "alias ni='npm install'"
                echo "alias nt='npm test'"
                echo "alias ns='npm start'"
                ;;
            "python")
                echo "alias py='python3'"
                echo "alias pir='pip install -r requirements.txt'"
                echo "alias ve='python -m venv venv && source venv/bin/activate'"
                ;;
            "go")
                echo "alias gt='go test ./...'"
                echo "alias gb='go build'"
                echo "alias gmt='go mod tidy'"
                ;;
        esac
    done
}

# Auto-setup function
auto_setup() {
    local project_types=("$@")
    
    echo -e "${YELLOW}Auto-setup recommendations:${NC}"
    
    for type in "${project_types[@]}"; do
        case "$type" in
            "nix")
                if [[ -f "flake.nix" && ! -f ".envrc" ]]; then
                    echo -e "${GREEN}Creating .envrc for direnv...${NC}"
                    echo "use flake" > .envrc
                    echo "Run: direnv allow"
                fi
                ;;
            "git")
                if [[ ! -f ".gitignore" ]]; then
                    echo -e "${BLUE}Consider creating a .gitignore file${NC}"
                fi
                ;;
        esac
    done
}

# Main function
main() {
    local current_dir="${1:-$(pwd)}"
    local types=($(detect_project_type "$current_dir"))
    
    if [[ ${#types[@]} -eq 0 ]]; then
        echo -e "${YELLOW}No specific project type detected in ${current_dir}${NC}"
        echo -e "${BLUE}This appears to be a generic directory.${NC}"
        echo -e "${GREEN}Available tools: fd, rg, eza, bat, etc.${NC}"
        exit 0
    fi
    
    echo -e "${CYAN}Project Analysis for: ${current_dir}${NC}"
    echo -e "${CYAN}$(printf '%.0sâ”€' {1..50})${NC}"
    echo
    
    for type in "${types[@]}"; do
        suggest_tools "$type"
        echo
    done
    
    echo -e "${CYAN}$(printf '%.0sâ”€' {1..50})${NC}"
    generate_aliases "${types[@]}"
    echo
    auto_setup "${types[@]}"
    
    echo
    echo -e "${BLUE}ðŸ’¡ Tips:${NC}"
    echo -e "  â€¢ Run ${GREEN}tools${NC} to see all available tools"
    echo -e "  â€¢ Use ${GREEN}fd${NC} and ${GREEN}rg${NC} for fast file operations"
    echo -e "  â€¢ Try ${GREEN}lazygit${NC} for Git management"
    echo -e "  â€¢ Use ${GREEN}just --list${NC} to see available tasks"
}

# Handle command line arguments
case "${1:-detect}" in
    "detect")
        main "${2:-}"
        ;;
    "type")
        detect_project_type "${2:-}"
        ;;
    "help")
        echo "Project Detection Tool"
        echo "Usage:"
        echo "  project-detect [detect] [directory]  # Analyze project and suggest tools"
        echo "  project-detect type [directory]      # Just show project type"
        echo "  project-detect help                  # Show this help"
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo "Use 'project-detect help' for usage information"
        exit 1
        ;;
esac